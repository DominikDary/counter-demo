// This file was generated by counterfeiter
package mocks

import "sync"

type FileLinesCounter struct {
	CountLinesStub        func(filePath string) (int, error)
	countLinesMutex       sync.RWMutex
	countLinesArgsForCall []struct {
		filePath string
	}
	countLinesReturns struct {
		result1 int
		result2 error
	}
}

func (fake *FileLinesCounter) CountLines(filePath string) (int, error) {
	fake.countLinesMutex.Lock()
	fake.countLinesArgsForCall = append(fake.countLinesArgsForCall, struct {
		filePath string
	}{filePath})
	fake.countLinesMutex.Unlock()
	if fake.CountLinesStub != nil {
		return fake.CountLinesStub(filePath)
	} else {
		return fake.countLinesReturns.result1, fake.countLinesReturns.result2
	}
}

func (fake *FileLinesCounter) CountLinesCallCount() int {
	fake.countLinesMutex.RLock()
	defer fake.countLinesMutex.RUnlock()
	return len(fake.countLinesArgsForCall)
}

func (fake *FileLinesCounter) CountLinesArgsForCall(i int) string {
	fake.countLinesMutex.RLock()
	defer fake.countLinesMutex.RUnlock()
	return fake.countLinesArgsForCall[i].filePath
}

func (fake *FileLinesCounter) CountLinesReturns(result1 int, result2 error) {
	fake.CountLinesStub = nil
	fake.countLinesReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}
